[tool.poetry]
authors = ["Joel Collins <joel.collins@renalregistry.nhs.uk>"]
description = "A FastAPI + Pydantic extension for simplifying hypermedia-driven API development."
license = "MIT"
name = "fastapi-hypermodel"
readme = "README.md"
repository = "https://github.com/jtc42/fastapi-hypermodel"
version = "2.1.0"

[tool.poetry.dependencies]
fastapi = ">=0.65.2"
pydantic = ">=2.0,<3.0"
typing_extensions = ">=4.0.0"
python = ">=3.8,<4.0"
jsonref = ">=1.1.0,<2.0.0"
jsonschema = ">=4.0.0,<5.0.0"
frozendict = "^2.4.0"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.0"
httpx = ">=0.23.1,<0.27.0"
mkdocs-material = ">=8.3.9,<10.0.0"
pylint = ">=2.6.2,<4.0.0"
pylint_pydantic = "^0.3.2"
mypy = ">=0.991,<1.9"
pytest = ">=7,<9"
pytest-cov = ">=3,<5"
pytest-lazy-fixtures = ">=1.0.1"
requests = "^2.25.1"
ruff = ">=0.1.8,<0.3.0"
tox = "^4.4"
uvicorn = ">=0.17.6,<0.28.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]


#########################
# Coverage
#########################

[tool.coverage.report]
exclude_also = [
    "if __name__ == .__main__.:",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

#########################
# MyPy
#########################

[tool.mypy]
strict = true
ignore_missing_imports = true
disable_error_code = [
    "unused-ignore",  # To use names in Pydantic Init
]

#########################################
# Ruff
#########################################

[tool.ruff]
fix = true
preview = true
ignore = [
    "A003",   # FIXME
    "ANN401", # Ignore Anys
    "ISC001", # Disable for compatibility with ruff-format
    "UP007",  # Not compatible with Python 3.8
    "UP006",  # Not compatible with Python 3.8
]
extend-exclude = ["tests", "*_schema.py"]
target-version = "py38"

[tool.ruff.lint]
extend-select = [
    # "D",     # pydocstyle
    # "FBT",   # flake8-boolean-trap
    # "COM",   # flake8-commas
    "E",    # pycodestyle
    "UP",   # pyupgrade
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "RSE",  # flake8-return
    "SIM",  # flake8-simplify
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "G",    # flake8-logging-format
    "ISC",  # flake8-implicit-str-concat
    "T20",  # flake8-print
    "EM",   # flake8-errmsg
    "SLF",  # flake8-self
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "TID",  # flake8-tidy-imports
    "PTH",  # flake8-use-pathlib
    "LOG",  # flake8-logging
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "TRY",  # tryceratops
    "I",    # isort
    "ERA",  # erradicate
    "PERF", # Perflint
    "FURB", # refurb
    "RUF",  # ruff
]

[tool.ruff.format]
# Set Ruff to imitate Black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


#########################################
# PyLint
#########################################

[tool.pylint.main]
fail-on = ["I"]
fail-under = 10
jobs = 8
limit-inference-results = 1000
py-version = "3.8"
load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.code_style",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.docparams",
    "pylint.extensions.dunder",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.magic_value",
    "pylint.extensions.mccabe",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
    "pylint_pydantic",
]

[tool.pylint.dunder]
good-dunder-names = [
    "__get_pydantic_core_schema__",
    "__get_pydantic_json_schema__",
    "__schema_subclasses__",
]

[tool.pylint.design]
max-args = 7
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-complexity = 10
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50

[tool.pylint.format]
indent-after-paren = 4
indent-string = "    "
max-line-length = 120
max-module-lines = 400

[tool.pylint.'MESSAGES CONTROL']
disable = [
    "line-too-long",
    "unsubscriptable-object",         # Disabled until proper Python 3.9 support is fixed in PyLint
    "fixme",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-param-doc",
    "too-few-public-methods",
    "too-many-arguments",
    "consider-using-assignment-expr", # Disabled until walrus operator is widely used
    "unused-variable",                # Too many false positives
    "too-many-lines",                 # Disable until refactor
]
enable = [
    "bad-inline-option",
    "file-ignored",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "deprecated-pragma",
    "file-ignored",
]

max-line-length = 88

[tool.pylint.'MASTER']
extension-pkg-allow-list = "pydantic"

[tool.pylint.refactoring]
max-nested-blocks = 3
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.exceptions]
overgeneral-exceptions = ["'builtins.Exception'"]

[tool.pylint.string_constant]
check-quote-consistency = true

[tool.pylint.string]
check-str-concat-over-line-jumps = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-signatures = true
min-similarity-lines = 12

[tool.pylint.variables]
allow-global-unused-variables = false
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "(_+[a-zA-Z0-9]*?$)|dummy"
ignored-argument-names = "_.*"
